{"collectDiamondHoeFromChest": {"code": "async function collectDiamondHoeFromChest(bot) {\n  // The chest position is not given, so we need to find it first\n  const chest = bot.findBlock({\n    matching: mcData.blocksByName.chest.id,\n    maxDistance: 32\n  });\n  if (!chest) {\n    bot.chat(\"No chest found\");\n    return;\n  }\n  // Get the diamond hoe from the chest\n  await getItemFromChest(bot, chest.position, {\n    \"diamond_hoe\": 1\n  });\n  bot.chat(\"Diamond hoe collected\");\n}", "description": "async function collectDiamondHoeFromChest(bot) {\n    // The function is about collecting a diamond hoe from a chest. First, it searches for a chest block within a maximum distance of 32 blocks. If no chest is found, it sends a chat message saying \"No chest found\" and exits the function. If a chest is found, it calls a helper function `getItemFromChest` to retrieve a diamond hoe from the chest. Once the diamond hoe is obtained, it sends a chat message saying \"Diamond hoe collected\".\n}"}, "tillGrassNearWater": {"code": "async function tillGrassNearWater(bot) {\n  // Check if the bot has a hoe in its inventory\n  var hoe = bot.inventory.items().find(item => item.name.includes('hoe'));\n  if (!hoe) {\n    // Collect a hoe from the chest\n    await collectDiamondHoeFromChest(bot);\n    hoe = bot.inventory.items().find(item => item.name.includes('hoe'));\n    bot.chat(\"Hoe collected\");\n  }\n\n  // Find a water source and go to a block next to it\n  const water = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!water) {\n    bot.chat(\"No water source found\");\n    return;\n  }\n  await bot.pathfinder.goto(new GoalGetToBlock(water.position.x, water.position.y, water.position.z + 1));\n  bot.chat(\"Arrived at water source\");\n\n  // Find a nearby grass block that is on the same level as the bot and go to a block next to it\n  const grass = bot.findBlock({\n    matching: mcData.blocksByName.grass_block.id,\n    maxDistance: 32,\n    position: bot.entity.position.offset(0, -1, 0) // The grass block should be on the same level as the bot\n  });\n\n  if (!grass) {\n    bot.chat(\"No grass block found\");\n    return;\n  }\n  await bot.pathfinder.goto(new GoalGetToBlock(grass.position.x, grass.position.y, grass.position.z - 1));\n  bot.chat(\"Arrived at grass block\");\n\n  // Equip the hoe\n  await bot.equip(hoe, 'hand');\n\n  // Look at the grass block\n  await bot.lookAt(grass.position.offset(0, 1, 0));\n\n  // Use the hoe to till the grass block\n  await bot.activateBlock(grass);\n  bot.chat(\"Grass block tilled\");\n}", "description": "async function tillGrassNearWater(bot) {\n    // The function is about tilling a grass block near a water source using a hoe. First, it checks if the bot has a hoe in its inventory. If not, it collects a hoe from a chest. Then, it finds a water source and moves to a block next to it. After that, it finds a nearby grass block on the same level as the bot and moves to a block next to it. The function equips the hoe and looks at the grass block. Finally, it uses the hoe to till the grass block.\n}"}, "tillGrassNearWaterEightTimes": {"code": "async function tillGrassNearWater(bot) {\n  // Check if the bot has a hoe in its inventory\n  var hoe = bot.inventory.items().find(item => item.name.includes('hoe'));\n  if (!hoe) {\n    // Collect a hoe from the chest\n    await collectDiamondHoeFromChest(bot);\n    hoe = bot.inventory.items().find(item => item.name.includes('hoe'));\n    bot.chat(\"Hoe collected\");\n  }\n\n  // Find a water source and go to a block next to it\n  const water = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!water) {\n    bot.chat(\"No water source found\");\n    return;\n  }\n  await bot.pathfinder.goto(new GoalGetToBlock(water.position.x, water.position.y, water.position.z + 1));\n  bot.chat(\"Arrived at water source\");\n\n  // Find a nearby grass block that is on the same level as the bot and go to a block next to it\n  const grass = bot.findBlock({\n    matching: mcData.blocksByName.grass_block.id,\n    maxDistance: 32,\n    position: bot.entity.position.offset(0, -1, 0) // The grass block should be on the same level as the bot\n  });\n\n  if (!grass) {\n    bot.chat(\"No grass block found\");\n    return;\n  }\n  await bot.pathfinder.goto(new GoalGetToBlock(grass.position.x, grass.position.y, grass.position.z - 1));\n  bot.chat(\"Arrived at grass block\");\n\n  // Equip the hoe\n  await bot.equip(hoe, 'hand');\n\n  // Look at the grass block\n  await bot.lookAt(grass.position.offset(0, 1, 0));\n\n  // Use the hoe to till the grass block\n  await bot.activateBlock(grass);\n  bot.chat(\"Grass block tilled\");\n}\n\nasync function tillGrassNearWaterEightTimes(bot) {\n  for (let i = 0; i < 8; i++) {\n    await tillGrassNearWater(bot);\n  }\n}", "description": "async function tillGrassNearWaterEightTimes(bot) {\n    // The function is about tilling grass blocks near a water source using a hoe. It first checks if the bot has a hoe in its inventory, and if not, it collects one from a chest. Then, it finds a water source and moves to a block next to it. After that, it finds a nearby grass block on the same level as the bot and moves to a block next to it. The bot equips the hoe, looks at the grass block, and uses the hoe to till the grass block. This process is repeated eight times in the `tillGrassNearWaterEightTimes` function.\n}"}, "collectTenSeedsFromChest": {"code": "async function collectTenSeedsFromChest(bot) {\n  // Find the chest\n  const chest = bot.findBlock({\n    matching: mcData.blocksByName.chest.id,\n    maxDistance: 32\n  });\n  if (!chest) {\n    bot.chat(\"No chest found\");\n    return;\n  }\n  // Get 10 seeds from the chest\n  await getItemFromChest(bot, chest.position, {\n    \"wheat_seeds\": 10\n  });\n  bot.chat(\"10 seeds collected\");\n}", "description": "async function collectTenSeedsFromChest(bot) {\n    // The function is about collecting 10 wheat seeds from a chest. First, it searches for a chest block within a maximum distance of 32 blocks. If no chest is found, it sends a chat message saying \"No chest found\" and exits the function. If a chest is found, it calls a helper function to retrieve 10 wheat seeds from the chest. After successfully collecting the seeds, it sends a chat message saying \"10 seeds collected\".\n}"}, "collectAndPlantSeeds": {"code": "async function collectAndPlantSeeds(bot) {\n  // Check if there are seeds in the inventory\n  const seeds = bot.inventory.items().find(item => item.name === 'wheat_seeds');\n  if (!seeds) {\n    // Collect seeds from the chest\n    await getItemFromChest(bot, new Vec3(5, -62, -10), {\n      \"wheat_seeds\": 1\n    });\n    bot.chat(\"Seeds collected\");\n  } else {\n    // Find a farmland block and go to it\n    const farmland = bot.findBlock({\n      matching: mcData.blocksByName.farmland.id,\n      maxDistance: 32\n    });\n    if (!farmland) {\n      bot.chat(\"No farmland found\");\n      return;\n    }\n    await bot.pathfinder.goto(new GoalGetToBlock(farmland.position.x, farmland.position.y, farmland.position.z));\n    bot.chat(\"Arrived at farmland\");\n\n    // Equip the seeds\n    await bot.equip(seeds, 'hand');\n\n    // Look at the farmland block\n    await bot.lookAt(farmland.position.offset(0, 1, 0));\n\n    // Use the seeds to plant them\n    await bot.activateBlock(farmland);\n    bot.chat(\"Seeds planted\");\n  }\n}", "description": "async function collectAndPlantSeeds(bot) {\n    // The function is about collecting and planting wheat seeds. First, it checks if there are seeds in the inventory. If not, it collects seeds from a chest. If there are seeds available, it finds a farmland block and moves towards it. Then, it equips the seeds in the hand and looks at the farmland block. Finally, it uses the seeds to plant them on the farmland block.\n}"}, "collectAndPlantSeedsOnUnoccupiedFarmland": {"code": "async function collectAndPlantSeedsOnUnoccupiedFarmland(bot) {\n  // Find the chest\n  const chest = bot.findBlock({\n    matching: mcData.blocksByName.chest.id,\n    maxDistance: 32\n  });\n  if (!chest) {\n    bot.chat(\"No chest found\");\n    return;\n  }\n  // Get the seeds from the chest\n  await getItemFromChest(bot, chest.position, {\n    \"wheat_seeds\": 10\n  });\n  bot.chat(\"Seeds collected\");\n\n  // Find 20 farmland blocks that aren't occupied by seeds already\n  const farmlands = bot.findBlocks({\n    matching: mcData.blocksByName.farmland.id,\n    maxDistance: 32,\n    count: 20\n  }).filter(farmland => {\n    const blockAbove = bot.blockAt(farmland.offset(0, 1, 0));\n    return !(blockAbove && blockAbove.name === 'wheat');\n  });\n  if (farmlands.length < 10) {\n    bot.chat(\"Not enough unoccupied farmland found\");\n    return;\n  }\n\n  // Equip the seeds\n  const seeds = bot.inventory.items().find(item => item.name === 'wheat_seeds');\n  await bot.equip(seeds, 'hand');\n\n  // Plant seeds on each unoccupied farmland\n  for (let i = 0; i < 10; i++) {\n    const farmland = farmlands[i];\n    // Go to the farmland block\n    await bot.pathfinder.goto(new GoalGetToBlock(farmland.x, farmland.y, farmland.z));\n    bot.chat(\"Arrived at farmland\");\n\n    // Look at the farmland block\n    await bot.lookAt(farmland.offset(0, 1, 0));\n\n    // Use the seeds to plant them\n    await bot.activateBlock(bot.blockAt(farmland));\n    bot.chat(\"Seeds planted\");\n  }\n}", "description": "async function collectAndPlantSeedsOnUnoccupiedFarmland(bot) {\n    // The function is about collecting wheat seeds from a chest and planting them on unoccupied farmland. First, it finds a chest and checks if it exists. If not, it returns. Then, it collects 10 wheat seeds from the chest and notifies that the seeds are collected. Next, it finds 20 unoccupied farmland blocks within a certain distance. If there are less than 10 unoccupied farmland blocks, it returns. After that, it equips the wheat seeds in the hand. It then iterates through the first 10 unoccupied farmland blocks and goes to each block, looks at it, and plants the seeds.\n}"}}